name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., 0.3.4)"
        required: true
        type: string
      publish_to_pypi:
        description: "Publish to PyPI"
        required: true
        default: true
        type: boolean
      create_draft:
        description: "Create as draft release"
        required: false
        default: false
        type: boolean

permissions:
  contents: write

jobs:
  validate-inputs:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.validate.outputs.version }}
    steps:
      - name: Validate version format
        id: validate
        run: |
          VERSION="${{ inputs.version }}"
          echo "Validating version: $VERSION"

          # Strict semantic version validation
          if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\.[a-zA-Z0-9]+)*)?(\+[a-zA-Z0-9]+(\.[a-zA-Z0-9]+)*)?$ ]]; then
            echo "‚ùå Invalid version format: $VERSION"
            echo "Expected semantic version (e.g., 1.2.3, 1.2.3-alpha.1, 1.2.3+build.1)"
            exit 1
          fi

          echo "‚úÖ Version format is valid"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

  release:
    needs: validate-inputs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup UV
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          python-version: "3.12"

      - name: Install project dependencies
        run: uv sync --all-extras

      - name: Update version and create commit
        id: version_update
        env:
          VERSION: ${{ needs.validate-inputs.outputs.version }}
        run: |
          echo "üîÑ Updating version to $VERSION"

          # Backup original file
          cp pyproject.toml pyproject.toml.backup

          # Update version in pyproject.toml
          sed -i -E "0,/^version = \".*\"/s//version = \"$VERSION\"/" pyproject.toml

          # Verify the change was made
          if ! grep -q "version = \"$VERSION\"" pyproject.toml; then
            echo "‚ùå Failed to update version in pyproject.toml"
            echo "Current content around version line:"
            grep -n -A2 -B2 "version = " pyproject.toml || echo "No version line found"
            exit 1
          fi

          echo "‚úÖ Version updated successfully"
          echo "Updated version line:"
          grep "version = " pyproject.toml

          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Check if there are changes to commit
          if git diff --quiet pyproject.toml; then
            echo "‚ö†Ô∏è No version changes detected"
          else
            git add pyproject.toml
            git commit -m "chore: bump version to v$VERSION"

            # Push changes
            CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
            git push origin "$CURRENT_BRANCH"
            echo "‚úÖ Version commit pushed to $CURRENT_BRANCH"
          fi

          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Create and push tag
        env:
          VERSION: ${{ steps.version_update.outputs.version }}
        run: |
          TAG="v$VERSION"

          # Check if tag already exists
          if git tag -l | grep -q "^$TAG$"; then
            echo "‚ö†Ô∏è Tag $TAG already exists"
            git tag -d "$TAG" || true
            git push origin ":refs/tags/$TAG" || true
            echo "üóëÔ∏è Removed existing tag"
          fi

          # Create new tag
          git tag -a "$TAG" -m "Release $TAG"
          git push origin "$TAG"
          echo "‚úÖ Created and pushed tag $TAG"

      - name: Build package
        run: |
          echo "üî® Building package..."

          # Clean any existing build artifacts
          rm -rf dist/ build/ *.egg-info/

          # Build the package
          uv build

          # Verify build artifacts exist
          if [ ! -f "dist/"*.whl ] || [ ! -f "dist/"*.tar.gz ]; then
            echo "‚ùå Build artifacts not found"
            exit 1
          fi

          echo "‚úÖ Package built successfully"
          ls -la dist/

      - name: Verify package
        run: |
          echo "üîç Verifying package..."

          # Additional verification with built-in tools
          echo "Built artifacts:"
          ls -la dist/

          # Check wheel contents
          echo "Checking wheel contents:"
          uv run python -m zipfile -l dist/*.whl | head -20

          echo "‚úÖ Package verification completed"

      - name: Publish to PyPI
        if: ${{ inputs.publish_to_pypi }}
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          echo "üì¶ Publishing to PyPI..."

          # Install twine for publishing
          uv add --dev twine

          # Check package with twine first
          echo "Checking package with twine..."
          uv run twine check dist/*

          # Upload to PyPI
          echo "Uploading to PyPI..."
          uv run twine upload dist/* --verbose --skip-existing

      # Alternative PyPI publishing method using GitHub Action
      # Uncomment this and comment out the above step if you prefer using the action
      # - name: Publish to PyPI (Alternative)
      #   if: ${{ inputs.publish_to_pypi }}
      #   uses: pypa/gh-action-pypi-publish@v1.11.0
      #   with:
      #     packages-dir: dist/
      #     verbose: true
      #     skip-existing: true
      #     print-hash: true
      #     password: ${{ secrets.PYPI_API_TOKEN }}

      - name: Extract changelog for release
        id: changelog
        env:
          VERSION: ${{ steps.version_update.outputs.version }}
        run: |
          echo "üìù Extracting changelog for version $VERSION"

          # Extract changelog section using awk
          CHANGELOG_SECTION=$(awk -v version="$VERSION" '
            BEGIN { in_section = 0; found = 0 }
            /^## \['"'"'version'"'"'\]/ || /^## \['"'"'$version'"'"'\]/ {
              in_section = 1; found = 1; print; next
            }
            /^## \[/ && in_section { in_section = 0; exit }
            in_section { print }
          ' CHANGELOG.md)

                    # Fallback if no changelog section found
          if [ -z "$CHANGELOG_SECTION" ]; then
            echo "‚ö†Ô∏è No changelog section found for version $VERSION"
            CHANGELOG_SECTION="## [$VERSION] - $(date +%Y-%m-%d)

          Release $VERSION

          See [CHANGELOG.md](CHANGELOG.md) for detailed changes."
          else
            echo "‚úÖ Found changelog section for version $VERSION"
          fi

          # Escape for GitHub Actions multiline output
          {
            echo "content<<EOF"
            echo "$CHANGELOG_SECTION"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version_update.outputs.version }}
          name: "Hypster v${{ steps.version_update.outputs.version }}"
          body: |
            ${{ steps.changelog.outputs.content }}

            ---

            ## üì¶ Installation

            **Standard installation:**
            ```bash
            pip install hypster==${{ steps.version_update.outputs.version }}
            ```

            **With HPO support:**
            ```bash
            pip install 'hypster[optuna]==${{ steps.version_update.outputs.version }}'
            ```

            ## üìö Documentation

            - [Getting Started](https://github.com/gilad-rubin/hypster#getting-started)
            - [Documentation](https://github.com/gilad-rubin/hypster/tree/master/docs)
            - [Examples](https://github.com/gilad-rubin/hypster/tree/master/playground)

            Full changelog: [CHANGELOG.md](https://github.com/gilad-rubin/hypster/blob/master/CHANGELOG.md)
          draft: ${{ inputs.create_draft }}
          prerelease: false
          generate_release_notes: false

      - name: Summary
        run: |
          echo "## üéâ Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** v${{ steps.version_update.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **PyPI Published:** ${{ inputs.publish_to_pypi }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Draft Release:** ${{ inputs.create_draft }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag:** [v${{ steps.version_update.outputs.version }}](https://github.com/${{ github.repository }}/releases/tag/v${{ steps.version_update.outputs.version }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üì¶ Installation Commands" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "pip install hypster==${{ steps.version_update.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
